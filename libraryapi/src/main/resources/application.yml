spring:
  application:
    name: libraryapi
#  profiles:
#    active: production
# SPRING_PROFILES_ACTIVE=production
  output:
    ansi:
      enabled: ALWAYS
  datasource:
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/library} #variaveis de ambiente
    username: ${DATASOURCE_USERNAME:postgres}  #variaveis de ambiente
    password: ${DATASOURCE_PASSWORD:postgres}  #variaveis de ambiente
    driver-class-name: org.postgresql.Driver #conectar ao driver
  jpa:
    show-sql: true #mostra o SQL
    hibernate:
#      ddl-auto: update
      ddl-auto: none #nao gera nada, update = modifica, create-drop = cria e no fim mata
    properties:
      hibernate.format_sql: true #denta o SQL
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}  #variaveis de ambiente
            client-secret: ${GOOGLE_CLIENT_SECRET}  #variaveis de ambiente

logging:
  pattern:
    console: '%clr(%d{dd-MM-yyyy HH:mm:ss}){faint} %clr(%5p) %clr([%t]){faint} %clr(%-40.40logger){cyan} %clr(:){yellow} %m%n'
  file: #nome do arquivo
    name: app.log
  level: # Nível do  log  , trace → debug → info → warn → error
    root: warn # tipo : mostrar todos os logs warn
    io:
      github:
        cursodsousa: trace # nivel trace
    org:
      springframework:
        web: debug # nivel de debug
        security: trace

# trace
# debug
# info
# warn
# error

management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
        include: '*'



springdoc: #Desabilita As Repostas Genéricas
  override-with-generic-response: false


# production
---
spring:
  config:
    activate:
      on-profile: production
  jpa:
    show-sql: false


# homologacao
---
spring:
  config:
    activate:
      on-profile: homologacao
  jpa:
    show-sql: false
  datasource:
    url: jdbc:postgresql://localhost:5432/library